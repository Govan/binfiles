#!/bin/bash

OIFS="$IFS"
IFS=$'\n'

COMMITMENT_ISSUES_SETTINGS="$HOME/.commitment-issues"
COMMITMENT_ISSUES_GRACE_PERIOD="+60m"

main() {
  local arg=$1;shift
  if [ -n "$arg" ] ; then
    usage
  else
    setup_if_first_run
    read_repository_list | while read -r repository ; do
      alert_if_repository_is_dirty $repository
      alert_if_repository_needs_push $repository
#      alert_if_repository_needs_pull $repository
    done 
  fi
}


setup_if_first_run() {
  if [ ! -d $COMMITMENT_ISSUES_SETTINGS ] ; then
    mkdir "$COMMITMENT_ISSUES_SETTINGS"
    setup_repository_list
    setup_logo
  fi
}

read_repository_list() {
  cat "$COMMITMENT_ISSUES_SETTINGS/repositories"
}

setup_repository_list() {
  touch "$COMMITMENT_ISSUES_SETTINGS/repositories"
  echo "Give absolute paths to repositories you'd like to watch, one per line. Finish by giving an empty line";
  while true
  do
    read repository;
    case $repository in
      "") break;;
    * ) echo $repository >> "$COMMITMENT_ISSUES_SETTINGS/repositories";;
  esac
done
}

setup_logo() {
  echo "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" | base64 -D -o "$COMMITMENT_ISSUES_SETTINGS/logo.png"
}

repository_has_changes() {
  local repository=$1;shift
  local changes=0
  cd "$repository"; 
  for dirty_file in $(git status -s | sed 's/^.. //')
  do 

    if [ ! -f "$dirty_file" ] ; then
      (( changes += 1 ))
    else
      is_old_and_dirty=$(find "$dirty_file" -mtime $COMMITMENT_ISSUES_GRACE_PERIOD);
      if [ -n "$is_old_and_dirty"  ] ; then
        (( changes += 1 ))
      fi
    fi
  done
  echo $changes;
}

repository_needs_push() {
  local repository=$1;shift
  cd $repository;
  if git status | grep --quiet "branch is ahead"; then
    return 0;
  fi
  return 1;
}

repository_needs_pull() {
  local repository=$1;shift
  cd $repository;
  if git status | grep --quiet "branch is ahead"; then
    return 0;
  fi
  return 1;
}


alert_if_repository_is_dirty() {
  local repository=$1;shift
  local repo_name=$(basename $repository)
  local message="";
  local changes=$(repository_has_changes $repository)
  if [ $changes -gt 0 ] ; then
    if [ $changes -eq 1 ] ; then
      message="$repository has 1 change that hasn't been committed." 
    else
      message="$repository has $changes changes that haven't been committed."
    fi
    display_notification "$repo_name has uncommited changes!" $message
  fi
}


alert_if_repository_needs_push() {
  local repository=$1;shift
  local repo_name=$(basename $repository)
  if repository_needs_push $repository ; then 
    display_notification "$repo_name has unpushed commits" \
                         "$repository is out of sync. You really ought to push those commits to a remote. What if your computer explodes?"
  fi
}

alert_if_repository_needs_pull() {
  local repository=$1;shift
  if repository_needs_pull $repository ; then 
    display_notification "You have unpulled commits!" "$(basename $repository) needs to pull"
  fi
}

display_notification() {
  local title=$1;shift
  local message=$1;shift
  local logo="$COMMITMENT_ISSUES_SETTINGS/logo.png"

  export COMMITMENT_ISSUES_NOTIFICATION_TITLE=$title
  export COMMITMENT_ISSUES_NOTIFICATION_MESSAGE=$message
  /usr/local/bin/growlnotify -a commitment-issues \
              --image $logo \
              -s \
              -t $title \
              -m $message 

}

usage() {
    cat <<- EOF
    usage: commitment-issues options
    
    Read a list of targets from ~/.commitment-issues/repositories. Check each repository for

    a) Uncommited changes
    b) Unpushed commits
    c) Remote commits

    and display a suitable notification for any results via growl

    OPTIONS:
       -h --help                show this help
    
    Todo:
      Detect if growl is installed
      Show time of last update on dirty repositories
      Show difference between local/remote repositories
EOF
}


main $1
