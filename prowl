#!/usr/bin/env ruby

###################################
# To get round having issues with Gem paths
# and whatnot on new systems, just include the 
# source of the ruby-prowl gem
# https://github.com/augustl/ruby-prowl
####################################
require 'cgi'
require 'net/https'
require 'uri'


class Prowl
  class MissingAPIKey < RuntimeError; end
  class TooManyAPIKeys < RuntimeError; end
  class PriorityOutOfRange < RuntimeError; end

  API_URL = "https://prowl.weks.net:443/publicapi"
  MAX_API_KEYS = 5
  PRIORITY_RANGE = -2..2

  def initialize(defaults = {})
    @defaults = defaults
  end

  def add(params = {})
    perform("add", params)
  end

  # Modify this instance's defaults
  def defaults(params)
    @defaults = @defaults.merge(params)
  end

  def valid?
    @valid ||= (perform("verify") == 200)
  end

  # Utility function that creates an instance and sends a prowl
  def self.add(params = {})
    new(params).add
  end

  # Utility function to verify API keys
  def self.verify(apikey)
    new({:apikey => apikey}).valid?
  end

  private

  def perform(action, params = {})
    # Merge the default params with any custom ones
    unless !@defaults
      params = @defaults.merge(params)
    end

    if !params[:apikey] || (params[:apikey].is_a?(Array) && params[:apikey].size < 1)
      raise MissingAPIKey
    end

    # Raise an exception if we're trying to use more API keys than allowed for this action
    if params[:apikey].is_a?(Array) && ((action == "verify" && params[:apikey].size > 1) || params[:apikey].size > MAX_API_KEYS)
      raise TooManyAPIKeys
    end

    if params[:priority] && !PRIORITY_RANGE.include?(params[:priority])
      raise PriorityOutOfRange
    end

    # If there are multiple API Keys in an array, merge them into a comma-delimited string
    if params[:apikey].is_a?(Array)
      params[:apikey] = params[:apikey].join(",")
    end

    uri = URI.parse("#{API_URL}/#{action}")
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Get.new(uri.request_uri + "?" + params.map {|k, v| "#{k}=#{CGI.escape(v.to_s)}"}.join("&"))
    response = http.request(request)
    return response.code.to_i
  end
end

###################################
require 'optparse'
require 'yaml'


application = "prowl"
message_options = {:description=>"", :event=>""}
devices = YAML.load_file(File.expand_path('~/.prowl.yml'))
target_devices = devices.values # Default to sending to all devices

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: prowl-ruby.rb MESSAGE [EVENT_LABEL] [OPTIONS]"
  opt.banner << "Device names and api-keys are read from ~/.prowl.yml"
  opt.banner << "\n./prowl-ruby.rb 'the import has finished' one.example.com -a mysql -t iphone"
  opt.separator  "Options"

  opt.on("-a","--as APPLICATION_NAME"," application name to pass to growl") do |application_name|
    application = application_name
  end

  opt.on("-t","--to DEVICE_NAME"," device to target - defaults to all devices") do |device_name|
    apikey = devices[device_name.to_s.downcase].to_s
    target_devices = [apikey]
    if target_devices.first.empty?
      puts "You need to supply a target device (#{devices.keys.join(', ')}) or none at all."
      exit
    end
  end

  opt.on( '-h', '--help', 'Display this screen' ) do
    puts opt
    exit
  end
end

opt_parser.parse!


message_options[:description] = ARGV[0].to_s
message_options[:event] = ARGV[1].to_s


target_devices.each do |target_device|
  p = Prowl.new(:apikey => target_device, 
                :application => application)
  p.add(message_options)
end

